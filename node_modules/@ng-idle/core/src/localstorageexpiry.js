var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Injectable } from '@angular/core';
import { IdleExpiry } from './idleexpiry';
import { LocalStorage } from './localstorage';
/*
 * Represents a localStorage store of expiry values.
 * @extends IdleExpiry
 */
export var LocalStorageExpiry = (function (_super) {
    __extends(LocalStorageExpiry, _super);
    function LocalStorageExpiry(localStorage) {
        _super.call(this);
        this.localStorage = localStorage;
        this.expiryKey = 'expiry';
    }
    /*
     * Gets or sets the last expiry date in localStorage.
     * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
     * @param value - The expiry value to set; omit to only return the value.
     * @return The current expiry value.
     */
    LocalStorageExpiry.prototype.last = function (value) {
        if (value !== void 0) {
            this.setExpiry(value);
        }
        return this.getExpiry();
    };
    /*
     * Gets the expiry key name.
     * @return The name of the expiry key.
     */
    LocalStorageExpiry.prototype.getExpiryKey = function () {
        return this.expiryKey;
    };
    /*
     * Sets the expiry key name.
     * @param The name of the expiry key.
     */
    LocalStorageExpiry.prototype.setExpiryKey = function (key) {
        if (key) {
            this.expiryKey = key;
        }
    };
    LocalStorageExpiry.prototype.getExpiry = function () {
        var expiry = this.localStorage.getItem(this.expiryKey);
        if (expiry) {
            return new Date(parseInt(expiry, 10));
        }
        else {
            return null;
        }
    };
    LocalStorageExpiry.prototype.setExpiry = function (value) {
        this.localStorage.setItem(this.expiryKey, value.getTime().toString());
    };
    LocalStorageExpiry.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocalStorageExpiry.ctorParameters = [
        { type: LocalStorage, },
    ];
    return LocalStorageExpiry;
}(IdleExpiry));
//# sourceMappingURL=localstorageexpiry.js.map