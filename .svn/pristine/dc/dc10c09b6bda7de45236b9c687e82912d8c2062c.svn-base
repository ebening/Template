
import { Component, ViewEncapsulation, AfterViewInit, ChangeDetectorRef, ViewChild} from '@angular/core';

import {MediosAdminData} from "./medios-admin.data";
import {UtilService} from '../../service/util.service';
import {VigenciaEditor} from "./editors/vigenciaEditor";
import {CategoriaEditor} from "./editors/categoriaEditor";
import {SubCategoEditor} from "./editors/subcategoEditor";
import {CatalogService} from '../../service/catalog.service';
import {Modal} from "ng2-modal";
import {LocalDataSource} from "ng2-smart-table";
import {Eventos} from '../../model/Eventos';
import {StructureService} from '../../service/structure.service';
import {ActivatedRoute} from "@angular/router";

declare var REDIPS: any;

declare let XLSX: any;

interface SmartColumn {
  [name: string]: {};
}


@Component({
  selector: '[medios-admin]',
  templateUrl: './medios-admin.template.html',
  styleUrls: ['./medios-admin.style.scss'],
  encapsulation: ViewEncapsulation.None,
})
export class MediosAdmin implements AfterViewInit {

  /* *********+ Variables Motores *********** */

  private structureDataId : number = 0;
  private versionNum : number = 0;
  private eventoData : Eventos = new Eventos();

  //informacion de la configuracion de la vista
  private viewTitle : string = "";
  private viewContent : any = {};

  private viewActions : any[] = [];
  private actionsMap : any = {};

  /* ********************************************************** */

  @ViewChild('showColumnsModal') modalColumns: Modal;

  private sourceTableOfertas: LocalDataSource;

  private widthdivTable: string = '4500px';
  private fixWidth: number = 160;

  private settingsTable;
  private settingsTableCombo;
  private fechaSelected: Date = new Date();
  private fechaInicialOpts: any = {};
  private hasBaseDropZoneOver: boolean = false;

    public rd: any = REDIPS.drag;
    public counter: number = 0;
    public clonedDIV: boolean = false;
    public lastCell: any;
    public columnas: number[] = new Array(6);
    public paginas: Pagina[] = [];

    constructor(private dataDemo: MediosAdminData,
                private util: UtilService,
                private catalogService: CatalogService,
                private structureService : StructureService,
                private route: ActivatedRoute,
                private dc: ChangeDetectorRef) {

      this.settingsTable = util.getNewSmartTableSettings();
      this.settingsTableCombo = util.getNewSmartTableSettings();
      this.settingsTable.pager = {
        display: true,
        perPage: 5
      };
      this.structureDataId = this.route.snapshot.params['dataId'] || 0;
      this.versionNum = this.route.snapshot.params['versionNum'] || 0;

        for(var i = 1; i <= 5; i++){
            var pagina: Pagina = new Pagina();
            pagina.numero=i;
            this.paginas.push(pagina);
            pagina.lineas = [];
            var totalItems = 18;
            var numLineas = Math.ceil(totalItems/this.columnas.length);
            var itemNum = 1;
            for(var lineaIndex=0; lineaIndex < numLineas; lineaIndex++){
                var linea: Linea = new Linea();
                linea.items = [];
                pagina.lineas.push(linea);
                for(var itemIndex=0; itemIndex < this.columnas.length; itemIndex++){
                    var item: Item = new Item();
                    item.nombre = 'Producto Pag '+i+', Item '+itemNum;
                    item.precio =  Math.floor((Math.random() * 1000) + 1) + Math.random();
                    item.imageNumber = Math.floor((Math.random() * 10) + 1);
                    linea.items.push(item);
                    itemNum++;
                    if(itemNum>totalItems){
                        break;
                    }
                }
            }
        }
    }

    ngAfterViewInit() {
        this.lastCell = document.getElementById('lastCell');
        this.rd.init();
        this.rd.shift.animation = true;
        this.rd.style.opacityDisabled = 50;
        this.rd.hover.colorTd = '#9BB3DA';
        this.rd.event.droppedBefore = (targetCell: any) => {
            var empty = this.rd.emptyCell(targetCell, 'test');
            if (!empty) {
                this.rd.obj.parentNode.removeChild(this.rd.obj);
                this.rd.enableDrag(true, this.rd.td.target);
                if (!this.clonedDIV) {
                    this.rd.relocate(this.rd.td.target, this.rd.td.source);
                    this.rd.td.target.appendChild(this.rd.obj);
                }
                return false;
            }
        };
        this.rd.event.cloned = () => {
            this.counter++;
            this.rd.obj.innerHTML += this.counter;
        };
        this.rd.event.moved = (cloned: any) => {
            this.clonedDIV = cloned;
        };
    }

  ngOnInit(){
    //  this.loadEvento(this.structureDataId);
    this.initSmartColumns(false);
    this.initSmartColumnsComboTable();
    this.initDataCombos();
    this.fechaInicialOpts = this.util.loadDateOptions(new Date(), null);
    this.sourceTableOfertas = new LocalDataSource();
    this.sourceTableOfertas.load(this.dataDemo.staticInitData).then();
  }


  loadEvento(structureDataId : number){
    this.structureService.getEventoByStructureDataId(structureDataId).then(
      data => {
        this.eventoData = data;
      });
  }

  //funcion para cargar la configuracion de la pantalla
  getView() {
    this.structureService.getViewByAppId(1, this.versionNum).then(
      data => {
        this.viewContent = data;
        this.viewActions = data.viewAction || [];

        //armado de mapa de acciones
        let actionsResult = this.viewActions.reduce(function (map, obj) {
          map[obj.htmlId] = obj;
          return map;
        }, {});
        this.actionsMap = actionsResult;

        //asignacion de titulo
        this.viewTitle = this.viewContent.viewTitle;

        /*si aplica export de excel
         if(this.viewContent.applyExcelImport != null && this.viewContent.applyExcelImport){
         this.excelValidations = data.viewExcelValidations;
         //armado de mapa de validaciones
         let validations = this.excelValidations.reduce(function (map, obj) {
         map[obj.cell] = obj;
         return map;
         }, {});
         this.excelValidationsMap = validations;
         } */
      }
    );
  }

  initDataCombos(){
    this.catalogService.getCategorias().then(
      data => {
        this.dataDemo.categoriasData = [];
        this.dataDemo.categoriasData.push({id: '0', text: 'Selecciona'});
        for (let i: number = 0; i < data.length; i++){
          this.dataDemo.categoriasData.push(
            {id: '' + data[i].categoriasId, text: data[i].nombre}
          );
        }
      }
    );
  }

  showColumnHiddenModal(){
    this.modalColumns.open();
  }

  closeColumnHiddenModal(){
    this.modalColumns.close();
  }

  initSmartColumnsComboTable(){
    let cols: SmartColumn = {};
    cols['combo'] = {
      title: 'Combo'
    };
    cols['componente'] = {
      title: 'Componente'
    };
    this.settingsTableCombo.columns = cols;
  }

  initSmartColumns(closeModal: boolean){
    this.settingsTable = this.util.getNewSmartTableSettings();
    this.settingsTable['pager'] = {
      display: true,
      perPage: 8
    };
    let cols: SmartColumn = {};
    var countColumns: number = 0;
    for (var i: number = 0; i < this.dataDemo.columnas.length; i++){
      if (this.dataDemo.columnas[i].show == true){
        countColumns++;
        cols[this.dataDemo.columnas[i].key] = {
          title: this.dataDemo.columnas[i].label
        };
        switch(i){
          case 4:
            cols[this.dataDemo.columnas[i].key]['editor'] = {
              type: 'custom',
              component: CategoriaEditor
            };
            break;
          case 5:
            cols[this.dataDemo.columnas[i].key]['editor'] = {
              type: 'custom',
              component: SubCategoEditor
            };
            break;
          case 6:
            cols[this.dataDemo.columnas[i].key]['editor'] = {
              type: 'custom',
              component: VigenciaEditor,
              class: 'vigencia'
            };
            break;
          case 21:
            cols[this.dataDemo.columnas[i].key]['editor'] = {
              type: 'textarea'
            };
            break;
        }
      }
    }
    this.settingsTable.columns = cols;
    let width = countColumns * this.fixWidth;
    this.widthdivTable = width + 'px';
    if (closeModal == true){
      this.modalColumns.close();
    }
  }

  confirmDelete(event){
    if (confirm("Desea eliminar registro ?")){
      event.confirm.resolve();
    }else{
      event.confirm.reject();
    }
  }

  public fileOver(fileIsOver: boolean): void {
    this.hasBaseDropZoneOver = fileIsOver;
  }

  public onFileDrop(file: File): void {
    if (this.sourceTableOfertas == null){
      this.sourceTableOfertas = new LocalDataSource();
    }
    for (var i: number = 0; i < this.dataDemo.staticExcellData.length; i++){
      this.sourceTableOfertas.append(this.dataDemo.staticExcellData[i]).then(
        data => {
          let x = data;
        }
      );
    }

  }


}

class Pagina {
    public numero: number;
    public lineas: Linea[];
}

class Linea{
    public items: Item[];
}

class Item {
    public imageNumber: number;
    public nombre: string;
    public precio: number;
}
